events {
    worker_connections 1024; # Número de conexiones de trabajo para Nginx
}

http {
    # Define tus servidores backend para el balanceo de carga
    # 'backend' y 'backend_alter' son los nombres de los servicios en tu docker-compose.yml
    # Los backends escuchan en el puerto 80 internamente en sus contenedores
    upstream backend_servers {
        server backend:80;         # Usamos el nombre del servicio y el puerto interno (80)
        server backend_alter:80;   # Usamos el nombre del servicio y el puerto interno (80)
    }

    # Bloque del servidor para redirigir HTTP (puerto 80) a HTTPS (puerto 443)
    server {
        listen 80;
        server_name internal.api.tomatesoft.com www.internal.api.tomatesoft.com; # Tu subdominio de la API

        # Configuración para que Let's Encrypt (Dockploy) pueda validar el dominio
        location /.well-known/acme-challenge/ {
            root /var/www/certbot; # Ruta que Dockploy/Certbot espera
        }

        # Redirige cualquier solicitud HTTP a HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Bloque del servidor para manejar las solicitudes HTTPS (puerto 443)
    server {
        listen 443 ssl;
        server_name internal.api.tomatesoft.com www.internal.api.tomatesoft.com; # Tu subdominio de la API

        # Dockploy se encarga de la gestión de certificados SSL.
        # No necesitas especificar 'ssl_certificate' ni 'ssl_certificate_key' aquí,
        # Nginx los encontrará automáticamente a través de la configuración de Dockploy.
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Bloque para enrutar todas las solicitudes que lleguen a este dominio al backend
        location / {
            proxy_pass http://backend_servers; # Reenvía al grupo de backends
            proxy_set_header Host $host; # Pasa el encabezado Host original
            proxy_set_header X-Real-IP $remote_addr; # Pasa la IP real del cliente
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Pasa la cadena de IPs de proxy
            proxy_set_header X-Forwarded-Proto $scheme; # Pasa el protocolo original (http/https)

            # Cabeceras CORS (Cross-Origin Resource Sharing)
            # Permite que tu frontend en 'https://tomatesoft.com' acceda a esta API
            add_header 'Access-Control-Allow-Origin' 'https://tomatesoft.com'; # ¡Ajusta a tu dominio frontend si es diferente!
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization'; # Añade 'Authorization' si usas tokens JWT
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            add_header 'Access-Control-Allow-Credentials' 'true'; # Necesario si tu API usa cookies/sesiones

            # Manejo de solicitudes OPTIONS (preflight requests de CORS)
            # Para solicitudes HTTP complejas, el navegador envía primero un OPTIONS
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000; # Cachea la respuesta preflight por 20 días
                add_header 'Content-Type' 'text/plain charset=utf-8';
                add_header 'Content-Length' 0;
                return 204; # 'No Content', indica éxito para la solicitud preflight
            }
        }
    }
}