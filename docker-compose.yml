version: '3.8'

services:
  database:
    image: mongo:latest
    container_name: database_
    ports:
      - "${MONGO_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - /etc/mongo/mongo-new.keyfile:/etc/mongo/mongodb-keyfile:ro
    command: ["mongod", "--bind_ip_all", "--auth", "--replSet", "rs0", "--keyFile", "/etc/mongo/mongodb-keyfile"]
    restart: on-failure
    networks:
      - tomatesoft_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017 --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-init:
    image: mongo:latest
    depends_on:
      database:
        condition: service_healthy
    entrypoint: >
      bash -c "
      until mongo --host database_ -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'rs.status()' | grep -q 'ok'; do
        echo 'Waiting for replica set to be ready...';
        sleep 5;
      done;
      mongo --host database_ -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'rs.initiate({_id: \"rs0\", members: [{ _id: 0, host: \"database_:27017\" }]})'
      "
    networks:
      - tomatesoft_network

  backend:
    image: tomatesoft_server:latest
    container_name: backend_
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      - database
      - mongo-init
    networks:
      - tomatesoft_network
    ports:
      - "${SERVER_PORTS}"

  frontend:
    image: tomatesoft_frontend:latest
    container_name: frontend_
    build:
      context: ./client
      dockerfile: Dockerfile
    depends_on:
      - backend
    networks:
      - tomatesoft_network

volumes:
  mongodb_data:
    driver: local

networks:
  tomatesoft_network:
    driver: bridge

# version: '3.8'

# services:
#   database:
#     image: mongo:latest
#     container_name: database_
#     ports:
#       - "${MONGO_PORT}:27017"
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
#       MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
#       MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
#     volumes:
#       - mongodb_data:/data/db
#       - /etc/mongo/mongo-new.keyfile:/etc/mongo/mongodb-keyfile:ro
#     command: ["mongod", "--bind_ip_all", "--auth", "--replSet", "rs0", "--keyFile", "/etc/mongo/mongodb-keyfile"]
#     restart: on-failure
#     networks:
#       - tomatesoft_network

#   backend:
#     image: tomatesoft_server:latest
#     container_name: backend_
#     build:
#       context: ./server
#       dockerfile: Dockerfile
#     depends_on:
#       - database
#     networks:
#       - tomatesoft_network
#     ports:
#       - "${SERVER_PORTS}"

#   frontend:
#     image: tomatesoft_frontend:latest
#     container_name: frontend_
#     build:
#       context: ./client
#       dockerfile: Dockerfile
#     depends_on:
#       - backend
#     networks:
#       - tomatesoft_network

# volumes:
#   mongodb_data:
#     driver: local

# networks:
#   tomatesoft_network:
#     driver: bridge
